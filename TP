local TELEPORT_HOTKEY = 'f'
local SPEED_LIMITER = 350

if _G.teleport_disconnect then
 _G.teleport_disconnect()
end

local service = setmetatable({ }, {
 __index = function(self, key)
   return game:GetService(key)
 end
})

local user = service.Players.LocalPlayer
local mouse = user:GetMouse()

local get_target = function() 
 local node = CFrame.new(mouse.UnitRay.Origin)
 local hits = { }
 while node do
   local ray = mouse.UnitRay
   ray = Ray.new(ray.Origin, ray.Direction * 1000)
   local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, {
     user.Character,
     unpack(hits)
   })
   if hit.Transparency == 0 then
     return #hits == 0 and mouse.Hit or CFrame.new(position)
   end
   if hit then
     hits[#hits + 1] = hit
     node = CFrame.new(position) * (node - node.p)
   else
     return CFrame.new(position)
   end
 end
end

local teleport = function()
 local WAIT_SPEED = 1 / 30

 local root_part = user.Character:FindFirstChild('HumanoidRootPart') or user.Character:FindFirstChild('Torso')
 root_part.Anchored = true
 local target = get_target() + Vector3.new(0, 4, 0)
 local start = root_part.CFrame
 local distance = (target.p - start.p).magnitude
 for i = 0, 1, (SPEED_LIMITER / distance) * WAIT_SPEED do
   local new_position = start:lerp(target, i)
   root_part.CFrame = new_position
   wait(WAIT_SPEED)
 end
 root_part.Anchored = false
end

local event = service.UserInputService.InputBegan:Connect(function(key, game_processed)
 if game_processed or key.KeyCode ~= Enum.KeyCode[string.upper(TELEPORT_HOTKEY)] then
   return
 end
 return teleport()
end)

_G.teleport_disconnect = function()
 event:Disconnect()
 _G.teleport_disconnect = nil
end
